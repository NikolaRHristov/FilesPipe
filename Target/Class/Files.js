class p{In=async(...[t])=>{const a=await(await import("../Function/In.js")).default(t,this.Plan.Paths);for(const[s,n]of a)this.Plan.Paths.set(s,n);return this};By=async(...[t])=>(this.Plan.Results=await(await import("../Function/By.js")).default(t,this.Plan.Paths,this.Plan.Results),this);Not=async(...[t])=>(this.Plan.Results=await(await import("../Function/Not.js")).default(t,this.Plan.Results),this);Pipe=async(...[t])=>(this.Plan=await(await import("../Function/Pipe.js")).default(this.Plan,e(o,t??{})),this);Plan={Cache:i,Files:0,Logger:r,Info:{},Paths:new Map,Results:new Map,On:{Buffer:"",After:0,Before:0,Input:"",Output:""}};constructor(t,a){this.Plan.Cache=typeof t=="object"?e(this.Plan.Cache,t):this.Plan.Cache,this.Plan.Logger=typeof a=="number"?a:this.Plan.Logger}}const{default:{Cache:i,Logger:r,Action:o}}=await import("../Variable/Option.js"),{default:e}=await import("typescript-esbuild/Target/Function/Merge.js");export{o as Action,i as Cache,r as Logger,e as Merge,p as default};
