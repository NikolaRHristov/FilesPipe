class s{Pipe=async t=>await(await import("../Function/Pipe.js")).default(this.Plan,(await import("../Function/Merge.js")).default((await import("../Object/Option.js")).default.Action,t??{}));Not=async t=>(this.Plan.Results=await(await import("../Function/Not.js")).default(t,this.Plan.Results),this);By=async(t="**/*")=>(this.Plan.Results=await(await import("../Function/By.js")).default(t,this.Plan.Paths,this.Plan.Results),this);In=async(t="./")=>{const a=await(await import("../Function/In.js")).default(t,this.Plan.Paths);if(a instanceof Map)for(const[e,i]of a)this.Plan.Paths.set(e,i);return this};Plan={Cache:n,Files:0,Logger:o,Info:{},Paths:new Map,Results:new Map,On:{Buffer:"",After:0,Before:0,Input:"",Output:""}};constructor(t,a){this.Plan.Cache=t??this.Plan.Cache,this.Plan.Logger=a??this.Plan.Logger}}const{default:{Cache:n,Logger:o}}=await import("../Object/Option.js");export{n as Cache,o as Logger,s as default};
