class r{Pipe=async(...[t])=>await(await import("../Function/Pipe.js")).default(this.Plan,(await import("../Function/Merge.js")).default((await import("../Object/Option.js")).default.Action,t??{}));Not=async(...[t])=>(this.Plan.Results=await(await import("../Function/Not.js")).default(t,this.Plan.Results),this);By=async(...[t])=>(this.Plan.Results=await(await import("../Function/By.js")).default(t,this.Plan.Paths,this.Plan.Results),this);In=async(...[t])=>{const a=await(await import("../Function/In.js")).default(t,this.Plan.Paths);if(a instanceof Map)for(const[e,s]of a)this.Plan.Paths.set(e,s);return this};Plan={Cache:i,Files:0,Logger:n,Info:{},Paths:new Map,Results:new Map,On:{Buffer:"",After:0,Before:0,Input:"",Output:""}};constructor(t,a){this.Plan.Cache=typeof t=="object"?t:this.Plan.Cache,this.Plan.Logger=typeof a=="number"?a:this.Plan.Logger}}const{default:{Cache:i,Logger:n}}=await import("../Object/Option.js");export{i as Cache,n as Logger,r as default};
