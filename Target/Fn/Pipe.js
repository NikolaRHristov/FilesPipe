import n from"./Exec.js";import y from"./WalkUntilGit.js";import{constants as C}from"fs";import{access as L,writeFile as g,mkdir as m,stat as l}from"fs/promises";import{dirname as w}from"path";import{fileURLToPath as B}from"url";var R=async(e,{Fulfilled:r,Failed:f,Accomplished:s,Changed:c,Passed:u,Read:p,Wrote:O})=>{let t=e;if(e.Cache){try{await m(e.Cache,{recursive:!0}),await g(`${e.Cache}/.gitkeep`,"")}catch{}n(`cd ${await y(e.Cache instanceof URL?B(e.Cache):e.Cache)}`,!1),n(`git add ${e.Cache}`),n(`git --no-pager log --format="H%" --max-count=1 --oneline --name-only -- ${e.Cache}`),n("cd -")}for(const[i,h]of t.Results)try{if(t.On.Input=h,t.On.Output=i,t.On.Before=(await l(t.On.Input)).size,p&&O){t.On.Buffer=await p(t.On);const o=await O(t.On);if(!o)continue;if(t.On.Buffer=o,u&&await u(t.On)){try{await L(w(t.On.Output),C.W_OK)}catch{await m(w(t.On.Output),{recursive:!0})}if(await g(t.On.Output,t.On.Buffer,"utf-8"),t.On.After=(await l(t.On.Output)).size,t.Logger>0&&(t.Files++,c&&(t=await c(t))),t.Logger>1&&typeof s=="function"){const a=await s(t.On);a&&a.length>0&&console.log(a)}}}}catch(o){if(t.Results.delete(i),typeof f=="function"){const a=await f(t.On,o);a&&a.length>0&&console.log(a)}else t.Logger>1&&console.log(o)}if(t.Logger>0&&t.Results.size>0&&typeof r=="function"){const i=await r(t);i&&i.length>0&&console.log(i)}return t};export{R as default};
