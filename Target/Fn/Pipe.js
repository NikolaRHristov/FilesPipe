import{constants as y}from"fs";import{access as h,writeFile as O,mkdir as B,stat as p}from"fs/promises";import{dirname as g}from"path";import w from"./WalkUntilGit.js";import{fileURLToPath as C}from"url";var z=async(n,{Fulfilled:i,Failed:r,Accomplished:s,Changed:f,Passed:c,Read:u,Wrote:l})=>{let t=n;try{console.log(n.Cache),console.log(await w(C(n.Cache.toString()??"./Cache"))),O(`${await w("./Cache")}/.test`,"test")}catch{}for(const[o,m]of t.Results)try{if(t.On.Input=m,t.On.Output=o,t.On.Before=(await p(t.On.Input)).size,u&&l){t.On.Buffer=await u(t.On);const a=await l("./Cache",t.On);if(!a)continue;if(t.On.Buffer=a,c&&await c(t.On)){try{await h(g(t.On.Output),y.W_OK)}catch{await B(g(t.On.Output),{recursive:!0})}if(await O(t.On.Output,t.On.Buffer,"utf-8"),t.On.After=(await p(t.On.Output)).size,t.Logger>0&&(t.Files++,f&&(t=await f(t))),t.Logger>1&&typeof s=="function"){const e=await s(t.On);e&&e.length>0&&console.log(e)}}}}catch(a){if(t.Results.delete(o),typeof r=="function"){const e=await r(t.On,a);e&&e.length>0&&console.log(e)}else t.Logger>1&&console.log(a)}if(t.Logger>0&&t.Results.size>0&&typeof i=="function"){const o=await i(t);o&&o.length>0&&console.log(o)}return t};export{z as default};
