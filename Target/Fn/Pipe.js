import O from"./Exec.js";import y from"./WalkUntilGit.js";import{constants as C}from"fs";import{access as L,writeFile as l,mkdir as g,stat as m}from"fs/promises";import{dirname as w}from"path";import{fileURLToPath as B}from"url";var R=async(a,{Fulfilled:r,Failed:n,Accomplished:f,Changed:s,Passed:c,Read:u,Wrote:p})=>{let t=a;if(a.Cache){O(`cd ${await y(a.Cache.Search instanceof URL?B(a.Cache.Search):a.Cache.Search)}`,!1);try{await g(a.Cache.Folder,{recursive:!0}),await l(`${a.Cache}/.gitkeep`,"")}catch{}O("cd -")}for(const[i,h]of t.Results)try{if(t.On.Input=h,t.On.Output=i,t.On.Before=(await m(t.On.Input)).size,u&&p){t.On.Buffer=await u(t.On);const o=await p(t.On);if(!o)continue;if(t.On.Buffer=o,c&&await c(t.On)){try{await L(w(t.On.Output),C.W_OK)}catch{await g(w(t.On.Output),{recursive:!0})}if(await l(t.On.Output,t.On.Buffer,"utf-8"),t.On.After=(await m(t.On.Output)).size,t.Logger>0&&(t.Files++,s&&(t=await s(t))),t.Logger>1&&typeof f=="function"){const e=await f(t.On);e&&e.length>0&&console.log(e)}}}}catch(o){if(t.Results.delete(i),typeof n=="function"){const e=await n(t.On,o);e&&e.length>0&&console.log(e)}else t.Logger>1&&console.log(o)}if(t.Logger>0&&t.Results.size>0&&typeof r=="function"){const i=await r(t);i&&i.length>0&&console.log(i)}return t};export{R as default};
