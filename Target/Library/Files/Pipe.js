import{constants as w}from"fs";import{access as m,writeFile as y,mkdir as A,stat as l}from"fs/promises";import{dirname as O}from"path";var _=async(p,{Fulfilled:i,Failed:s,Accomplished:f,Changed:r,Passed:u,Read:c,Wrote:a})=>{let t=p;console.log("------ NAMES -------");for(const[o,g]of t.Results)try{if(t.On.Input=g,t.On.Output=o,t.On.Before=(await l(t.On.Input)).size,c&&a){t.On.Buffer=await c(t.On),console.log(a.prototype);const e=await a(t.On);if(!e)continue;if(t.On.Buffer=e,u&&await u(t.On)){try{await m(O(t.On.Output),w.W_OK)}catch{await A(O(t.On.Output),{recursive:!0})}if(await y(t.On.Output,t.On.Buffer,"utf-8"),t.On.After=(await l(t.On.Output)).size,t.Logger>0&&(t.Files++,r&&(t=await r(t))),t.Logger>1&&typeof f=="function"){const n=await f(t.On);n&&n.length>0&&console.log(n)}}}}catch(e){if(t.Results.delete(o),typeof s=="function"){const n=await s(t.On,e);n&&n.length>0&&console.log(n)}else t.Logger>1&&console.log(e)}if(t.Logger>0&&t.Results.size>0&&typeof i=="function"){const o=await i(t);o&&o.length>0&&console.log(o)}return t};export{_ as default};
