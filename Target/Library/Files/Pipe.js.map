{
  "version": 3,
  "sources": ["../../../Source/Library/Files/Pipe.ts"],
  "sourcesContent": ["import { constants as Constant } from \"fs\";\nimport {\n\taccess as Access,\n\twriteFile as File,\n\tmkdir as Make,\n\tstat as Stat,\n} from \"fs/promises\";\nimport { dirname as Dir } from \"path\";\nimport type { Executions, Plan } from \"../../Option/Index.js\";\n\nexport default async (\n\tPlan: Plan,\n\t{\n\t\tFulfilled,\n\t\tFailed,\n\t\tAccomplished,\n\t\tChanged,\n\t\tPassed,\n\t\tRead,\n\t\tWrote,\n\t}: Executions\n) => {\n\tlet _Plan = Plan;\n\n\tfor (const [Output, Input] of _Plan.Results) {\n\t\ttry {\n\t\t\t_Plan.On.Input = Input;\n\t\t\t_Plan.On.Output = Output;\n\n\t\t\t_Plan.On.Before = (await Stat(_Plan.On.Input)).size;\n\n\t\t\tif (Read && Wrote) {\n\t\t\t\t_Plan.On.Buffer = await Read(_Plan.On);\n\n\t\t\t\tconst Buffer = await Wrote(_Plan.On);\n\n\t\t\t\tif (!Buffer) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t_Plan.On.Buffer = Buffer;\n\n\t\t\t\tif (Passed && (await Passed(_Plan.On))) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait Access(Dir(_Plan.On.Output), Constant.W_OK);\n\t\t\t\t\t} catch (_Error) {\n\t\t\t\t\t\tawait Make(Dir(_Plan.On.Output), {\n\t\t\t\t\t\t\trecursive: true,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tawait File(_Plan.On.Output, _Plan.On.Buffer, \"utf-8\");\n\n\t\t\t\t\t_Plan.On.After = (await Stat(_Plan.On.Output)).size;\n\n\t\t\t\t\tif (_Plan.Debug > 0) {\n\t\t\t\t\t\t_Plan.Files++;\n\n\t\t\t\t\t\tif (Changed) {\n\t\t\t\t\t\t\t_Plan = await Changed(_Plan);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_Plan.Debug > 1) {\n\t\t\t\t\t\tif (typeof Accomplished === \"function\") {\n\t\t\t\t\t\t\tconst Message = await Accomplished(_Plan.On);\n\n\t\t\t\t\t\t\tif (Message && Message.length > 0) {\n\t\t\t\t\t\t\t\tconsole.log(Message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (_Error) {\n\t\t\t_Plan.Results.delete(Output);\n\n\t\t\tif (typeof Failed === \"function\") {\n\t\t\t\tconst Message = await Failed(_Plan.On, _Error);\n\n\t\t\t\tif (Message && Message.length > 0) {\n\t\t\t\t\tconsole.log(Message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (_Plan.Debug > 1) {\n\t\t\t\t\tconsole.log(_Error);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (_Plan.Debug > 0 && _Plan.Results.size > 0) {\n\t\tif (typeof Fulfilled === \"function\") {\n\t\t\tconst Message = await Fulfilled(_Plan);\n\n\t\t\tif (Message && Message.length > 0) {\n\t\t\t\tconsole.log(Message);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn _Plan;\n};\n"],
  "mappings": "AAAA,SAAS,aAAa,gBAAgB;AACtC;AAAA,EACC,UAAU;AAAA,EACV,aAAa;AAAA,EACb,SAAS;AAAA,EACT,QAAQ;AAAA,OACF;AACP,SAAS,WAAW,WAAW;AAG/B,IAAO,eAAQ,OACd,MACA;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACD,MACI;AACJ,MAAI,QAAQ;AAEZ,aAAW,CAAC,QAAQ,KAAK,KAAK,MAAM,SAAS;AAC5C,QAAI;AACH,YAAM,GAAG,QAAQ;AACjB,YAAM,GAAG,SAAS;AAElB,YAAM,GAAG,UAAU,MAAM,KAAK,MAAM,GAAG,KAAK,GAAG;AAE/C,UAAI,QAAQ,OAAO;AAClB,cAAM,GAAG,SAAS,MAAM,KAAK,MAAM,EAAE;AAErC,cAAM,SAAS,MAAM,MAAM,MAAM,EAAE;AAEnC,YAAI,CAAC,QAAQ;AACZ;AAAA,QACD;AAEA,cAAM,GAAG,SAAS;AAElB,YAAI,UAAW,MAAM,OAAO,MAAM,EAAE,GAAI;AACvC,cAAI;AACH,kBAAM,OAAO,IAAI,MAAM,GAAG,MAAM,GAAG,SAAS,IAAI;AAAA,UACjD,SAAS,QAAQ;AAChB,kBAAM,KAAK,IAAI,MAAM,GAAG,MAAM,GAAG;AAAA,cAChC,WAAW;AAAA,YACZ,CAAC;AAAA,UACF;AAEA,gBAAM,KAAK,MAAM,GAAG,QAAQ,MAAM,GAAG,QAAQ,OAAO;AAEpD,gBAAM,GAAG,SAAS,MAAM,KAAK,MAAM,GAAG,MAAM,GAAG;AAE/C,cAAI,MAAM,QAAQ,GAAG;AACpB,kBAAM;AAEN,gBAAI,SAAS;AACZ,sBAAQ,MAAM,QAAQ,KAAK;AAAA,YAC5B;AAAA,UACD;AAEA,cAAI,MAAM,QAAQ,GAAG;AACpB,gBAAI,OAAO,iBAAiB,YAAY;AACvC,oBAAM,UAAU,MAAM,aAAa,MAAM,EAAE;AAE3C,kBAAI,WAAW,QAAQ,SAAS,GAAG;AAClC,wBAAQ,IAAI,OAAO;AAAA,cACpB;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD,SAAS,QAAQ;AAChB,YAAM,QAAQ,OAAO,MAAM;AAE3B,UAAI,OAAO,WAAW,YAAY;AACjC,cAAM,UAAU,MAAM,OAAO,MAAM,IAAI,MAAM;AAE7C,YAAI,WAAW,QAAQ,SAAS,GAAG;AAClC,kBAAQ,IAAI,OAAO;AAAA,QACpB;AAAA,MACD,OAAO;AACN,YAAI,MAAM,QAAQ,GAAG;AACpB,kBAAQ,IAAI,MAAM;AAAA,QACnB;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAEA,MAAI,MAAM,QAAQ,KAAK,MAAM,QAAQ,OAAO,GAAG;AAC9C,QAAI,OAAO,cAAc,YAAY;AACpC,YAAM,UAAU,MAAM,UAAU,KAAK;AAErC,UAAI,WAAW,QAAQ,SAAS,GAAG;AAClC,gBAAQ,IAAI,OAAO;AAAA,MACpB;AAAA,IACD;AAAA,EACD;AAEA,SAAO;AACR;",
  "names": []
}
