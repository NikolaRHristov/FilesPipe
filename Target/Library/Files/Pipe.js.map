{
  "version": 3,
  "sources": ["../../../Source/Library/Files/Pipe.ts"],
  "sourcesContent": ["import { constants as Constant } from \"fs\";\nimport {\n\taccess as Access,\n\twriteFile as File,\n\tmkdir as Make,\n\tstat as Stat,\n} from \"fs/promises\";\nimport { dirname as Dir } from \"path\";\nimport type { Executions, Plan } from \"../../Option/Index.js\";\n\nexport default async (\n\tPlan: Plan,\n\t{\n\t\tFulfilled,\n\t\tFailed,\n\t\tAccomplished,\n\t\tChanged,\n\t\tPassed,\n\t\tRead,\n\t\tWrote,\n\t}: Executions\n) => {\n\tlet _Plan = Plan;\n\n\tfor (const [Output, Input] of _Plan.Results) {\n\t\ttry {\n\t\t\t_Plan.On.Input = Input;\n\t\t\t_Plan.On.Output = Output;\n\n\t\t\t_Plan.On.Before = (await Stat(_Plan.On.Input)).size;\n\n\t\t\tif (Read && Wrote) {\n\t\t\t\t_Plan.On.Buffer = await Read(_Plan.On);\n\n\t\t\t\tconst Buffer = await Wrote(_Plan.On);\n\n\t\t\t\tif (!Buffer) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t_Plan.On.Buffer = Buffer;\n\n\t\t\t\tif (Passed && (await Passed(_Plan.On))) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait Access(Dir(_Plan.On.Output), Constant.W_OK);\n\t\t\t\t\t} catch (_Error) {\n\t\t\t\t\t\tawait Make(Dir(_Plan.On.Output), {\n\t\t\t\t\t\t\trecursive: true,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tawait File(_Plan.On.Output, _Plan.On.Buffer, \"utf-8\");\n\n\t\t\t\t\t_Plan.On.After = (await Stat(_Plan.On.Output)).size;\n\n\t\t\t\t\tif (_Plan.Debug > 0) {\n\t\t\t\t\t\t_Plan.Files++;\n\n\t\t\t\t\t\tif (Changed) {\n\t\t\t\t\t\t\t_Plan = await Changed(_Plan);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_Plan.Debug > 1) {\n\t\t\t\t\t\tif (typeof Accomplished === \"function\") {\n\t\t\t\t\t\t\tconst Message = await Accomplished(_Plan.On);\n\n\t\t\t\t\t\t\tif (Message && Message.length > 0) {\n\t\t\t\t\t\t\t\tconsole.log(Message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (_Error) {\n\t\t\t_Plan.Results.delete(Output);\n\n\t\t\tif (typeof Failed === \"function\") {\n\t\t\t\tconst Message = await Failed(_Plan.On, _Error);\n\n\t\t\t\tif (Message && Message.length > 0) {\n\t\t\t\t\tconsole.log(Message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (_Plan.Debug > 1) {\n\t\t\t\t\tconsole.log(_Error);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (_Plan.Debug > 0 && _Plan.Results.size > 0) {\n\t\tif (typeof Fulfilled === \"function\") {\n\t\t\tconst Message = await Fulfilled(_Plan);\n\n\t\t\tif (Message && Message.length > 0) {\n\t\t\t\tconsole.log(Message);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn _Plan;\n};\n"],
  "mappings": "AAAA,OAAS,aAAaA,MAAgB,KACtC,OACC,UAAUC,EACV,aAAaC,EACb,SAASC,EACT,QAAQC,MACF,cACP,OAAS,WAAWC,MAAW,OAG/B,IAAOC,EAAQ,MACdC,EACA,CACC,UAAAC,EACA,OAAAC,EACA,aAAAC,EACA,QAAAC,EACA,OAAAC,EACA,KAAAC,EACA,MAAAC,CACD,IACI,CACJ,IAAIC,EAAQR,EAEZ,SAAW,CAACS,EAAQC,CAAK,IAAKF,EAAM,QACnC,GAAI,CAMH,GALAA,EAAM,GAAG,MAAQE,EACjBF,EAAM,GAAG,OAASC,EAElBD,EAAM,GAAG,QAAU,MAAMX,EAAKW,EAAM,GAAG,KAAK,GAAG,KAE3CF,GAAQC,EAAO,CAClBC,EAAM,GAAG,OAAS,MAAMF,EAAKE,EAAM,EAAE,EAErC,MAAMG,EAAS,MAAMJ,EAAMC,EAAM,EAAE,EAEnC,GAAI,CAACG,EACJ,SAKD,GAFAH,EAAM,GAAG,OAASG,EAEdN,GAAW,MAAMA,EAAOG,EAAM,EAAE,EAAI,CACvC,GAAI,CACH,MAAMd,EAAOI,EAAIU,EAAM,GAAG,MAAM,EAAGf,EAAS,IAAI,CACjD,MAAiB,CAChB,MAAMG,EAAKE,EAAIU,EAAM,GAAG,MAAM,EAAG,CAChC,UAAW,EACZ,CAAC,CACF,CAcA,GAZA,MAAMb,EAAKa,EAAM,GAAG,OAAQA,EAAM,GAAG,OAAQ,OAAO,EAEpDA,EAAM,GAAG,OAAS,MAAMX,EAAKW,EAAM,GAAG,MAAM,GAAG,KAE3CA,EAAM,MAAQ,IACjBA,EAAM,QAEFJ,IACHI,EAAQ,MAAMJ,EAAQI,CAAK,IAIzBA,EAAM,MAAQ,GACb,OAAOL,GAAiB,WAAY,CACvC,MAAMS,EAAU,MAAMT,EAAaK,EAAM,EAAE,EAEvCI,GAAWA,EAAQ,OAAS,GAC/B,QAAQ,IAAIA,CAAO,CAErB,CAEF,CACD,CACD,OAASC,EAAQ,CAGhB,GAFAL,EAAM,QAAQ,OAAOC,CAAM,EAEvB,OAAOP,GAAW,WAAY,CACjC,MAAMU,EAAU,MAAMV,EAAOM,EAAM,GAAIK,CAAM,EAEzCD,GAAWA,EAAQ,OAAS,GAC/B,QAAQ,IAAIA,CAAO,CAErB,MACKJ,EAAM,MAAQ,GACjB,QAAQ,IAAIK,CAAM,CAGrB,CAGD,GAAIL,EAAM,MAAQ,GAAKA,EAAM,QAAQ,KAAO,GACvC,OAAOP,GAAc,WAAY,CACpC,MAAMW,EAAU,MAAMX,EAAUO,CAAK,EAEjCI,GAAWA,EAAQ,OAAS,GAC/B,QAAQ,IAAIA,CAAO,CAErB,CAGD,OAAOJ,CACR",
  "names": ["Constant", "Access", "File", "Make", "Stat", "Dir", "Pipe_default", "Plan", "Fulfilled", "Failed", "Accomplished", "Changed", "Passed", "Read", "Wrote", "_Plan", "Output", "Input", "Buffer", "Message", "_Error"]
}
