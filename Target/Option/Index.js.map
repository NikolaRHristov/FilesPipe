{
  "version": 3,
  "sources": ["../../Source/Option/Index.ts"],
  "sourcesContent": ["import type { Pattern } from \"fast-glob\";\nimport { readFile as _File } from \"fs/promises\";\nimport type { Stream } from \"stream\";\n\nexport type Debug = 0 | 1 | 2;\n\nexport type Buffer =\n\t| string\n\t| NodeJS.ArrayBufferView\n\t| Iterable<string | NodeJS.ArrayBufferView>\n\t| AsyncIterable<string | NodeJS.ArrayBufferView>\n\t| Stream;\n\nexport interface Executions {\n\tFulfilled?: boolean | ((Plan: Plan) => Promise<false | string>);\n\n\tFailed?:\n\t\t| boolean\n\t\t| ((Input: File, _Error: unknown) => Promise<false | string>);\n\n\tAccomplished?: boolean | ((On: File) => Promise<false | string>);\n\n\tChanged?: (Plan: Plan) => Promise<Plan>;\n\n\tPassed?: (On: File) => Promise<Boolean>;\n\n\tRead?: (On: File) => Promise<Buffer>;\n\n\tWrote?: (On: File) => Promise<Buffer>;\n}\n\nexport type Exclude = string | RegExp | ((File: string) => boolean);\n\nexport type Path = string | URL | Map<string | URL, string | URL> | false;\n\nexport interface Options {\n\t// rome-ignore lint/suspicious/noExplicitAny:\n\t[key: string]: any;\n\n\tPath?: Path | Path[] | Set<Path>;\n\n\tExclude?: Exclude | Exclude[] | Set<Exclude>;\n\n\tFiles?: Pattern | Pattern[];\n\n\tType?: string;\n\n\tPipe?: Executions;\n\n\tLogger?: Debug;\n}\n\n// Results.set(`${Output}${File}`, `${Input}${File}`)\nexport interface Plan {\n\tDebug: Debug;\n\n\tFiles: number;\n\n\t// rome-ignore lint/suspicious/noExplicitAny:\n\tInfo: any;\n\n\tPaths: Map<Dir[\"Input\"], Dir[\"Output\"]>;\n\n\tResults: Map<\n\t\t`${Dir[\"Output\"]}${File[\"Output\"]}`,\n\t\t`${Dir[\"Input\"]}${File[\"Input\"]}`\n\t>;\n\n\tOn: File;\n}\n\nexport interface Dir {\n\tInput: string;\n\n\tOutput: string;\n}\n\nexport interface File {\n\tInput: string;\n\n\tOutput: string;\n\n\tAfter: number;\n\n\tBefore: number;\n\n\tBuffer: Buffer;\n}\n\nexport default {\n\tPath: \"./Target\",\n\tLogger: 2,\n\tPipe: {\n\t\tWrote: async (On) => On.Buffer,\n\t\tRead: async (On) => await _File(On.Input, \"utf-8\"),\n\t\tPassed: async (On) => On && true,\n\t\tFailed: async (On) => `Error: Cannot process file ${On.Input}!`,\n\t\tAccomplished: async (On) => `Processed ${On.Input} in ${On.Output}.`,\n\t\tFulfilled: async (Plan) =>\n\t\t\tPlan.Files > 0\n\t\t\t\t? `Successfully processed a total of ${Plan.Files} ${\n\t\t\t\t\t\tPlan.Files === 1 ? \"file\" : \"files\"\n\t\t\t\t  }.`\n\t\t\t\t: false,\n\t\tChanged: async (Plan) => Plan,\n\t},\n} satisfies Options;\n"],
  "mappings": "AACA,OAAS,YAAYA,MAAa,cAwFlC,IAAOC,EAAQ,CACd,KAAM,WACN,OAAQ,EACR,KAAM,CACL,MAAO,MAAOC,GAAOA,EAAG,OACxB,KAAM,MAAOA,GAAO,MAAMF,EAAME,EAAG,MAAO,OAAO,EACjD,OAAQ,MAAOA,GAAOA,GAAM,GAC5B,OAAQ,MAAOA,GAAO,8BAA8BA,EAAG,KAAK,IAC5D,aAAc,MAAOA,GAAO,aAAaA,EAAG,KAAK,OAAOA,EAAG,MAAM,IACjE,UAAW,MAAOC,GACjBA,EAAK,MAAQ,EACV,qCAAqCA,EAAK,KAAK,IAC/CA,EAAK,QAAU,EAAI,OAAS,OAC5B,IACA,GACJ,QAAS,MAAOA,GAASA,CAC1B,CACD",
  "names": ["_File", "Index_default", "On", "Plan"]
}
