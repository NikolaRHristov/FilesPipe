var m=async(c,{Accomplished:i,Changed:o,Failed:a,Fulfilled:f,Passed:r,Read:u,Wrote:s})=>{let t=c;for(const[e,w]of t.Results){t.On.Input=w,t.On.Output=e;try{if(t.On.Before=(await p(t.On.Input)).size,u&&s){if(t.On.Buffer=await u(t.On),t.On.Buffer=await s(t.On),!t.On.Buffer)continue;if(r&&await r(t.On)){try{await g(O(t.On.Output),l)}catch{await y(O(t.On.Output),{recursive:!0})}await _(t.On.Output,t.On.Buffer,"utf-8"),t.On.After=(await p(t.On.Output)).size,t.Logger>0&&(t.Files++,o&&(t=await o(t))),t.Logger>1&&typeof i=="function"&&console.log(await i(t.On))}}}catch(n){t.Results.delete(t.On.Output),typeof a=="function"?console.log(await a(t.On,n)):t.Logger>1&&console.log(n)}}if(t.Logger>0&&t.Results.size>0&&typeof f=="function"){const e=await f(t);e&&e.length>0&&console.log(e)}return t};const{dirname:O}=await import("path"),{constants:{W_OK:l},access:g,mkdir:y,writeFile:_,stat:p}=await import("fs/promises");export{l as W_OK,g as access,m as default,O as dirname,y as mkdir,p as stat,_ as writeFile};
