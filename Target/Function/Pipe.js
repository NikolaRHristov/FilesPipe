var l=async(w,{Accomplished:a,Changed:o,Failed:r,Fulfilled:f,Passed:s,Read:u,Wrote:p})=>{let t=w;for(const[i,g]of t.Results){t.On.Input=g,t.On.Output=i;try{if(t.On.Before=(await O(t.On.Input)).size,u&&p){if(t.On.Buffer=await u(t.On),t.On.Buffer=await p(t.On),!t.On.Buffer)continue;if(s&&await s(t.On)){try{await(await import("fs/promises")).access(c(t.On.Output),(await import("fs")).constants.W_OK)}catch{await(await import("fs/promises")).mkdir(c(t.On.Output),{recursive:!0})}if(await(await import("fs/promises")).writeFile(t.On.Output,t.On.Buffer,"utf-8"),t.On.After=(await O(t.On.Output)).size,t.Logger>0&&(t.Files++,o&&(t=await o(t))),t.Logger>1&&typeof a=="function"){const e=await a(t.On);e&&e.length>0&&console.log(e)}}}}catch(e){if(t.Results.delete(t.On.Output),typeof r=="function"){const n=await r(t.On,e);n&&n.length>0&&console.log(n)}else t.Logger>1&&console.log(e)}}if(t.Logger>0&&t.Results.size>0&&typeof f=="function"){const i=await f(t);i&&i.length>0&&console.log(i)}return t};const{stat:O}=await import("fs/promises"),{dirname:c}=await import("path");export{l as default,c as dirname,O as stat};
